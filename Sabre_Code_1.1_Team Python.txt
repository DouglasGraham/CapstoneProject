n = Model()
from math import ceil

I = [0,1,2,3,4,5,6,7,8,9,10,11]
F = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]
S = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
L = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]
Y = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,
109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,
275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,
358,359,360,361,362,363,364]
i = 0
f = 0
s = 0
l = 0
y = 0

# sets of months and the number of days in each month
months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
mdays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

# monthly line holders, crew scheduled, averges provided, std. devs. provided, and NORMDIST.INV calculated in excel at a = 0.85 (not sure if i've got this quite right)
mlh = [700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700]
crm = [476, 432, 469, 447, 465, 481, 475, 482, 436, 460, 480, 478]
mavg = [49.8, 32.1, 48.4, 35.3, 42.4, 45.3, 47.0, 40.0, 35.8, 41.0, 46.7, 55.7]
mvar = [9.7877, 9.1978, 9.9096, 9.4181, 9.6125, 9.8691, 10, 9.8995, 9.3113, 9.1214, 9.1978, 9.5394]
norminv85 = [59.94434826, 41.6329338, 58.67063131, 45.06119987, 52.36270753, 55.52871019, 57.36433389, 50.26016709, 45.4505251, 50.45372704, 56.2329338, 65.5869444]
normal85 = 1.036
vcplusres = [(mlh[i]-crm[i]) for i in I]

# slopes of the 3 reliability piecewise functions made for every month
mslope1 = [0.0346, 0.0362, 0.0344, 0.0356, 0.0351, 0.03445, 0.0340, 0.0344, 0.0359, 0.0364, 0.0395, 0.0353]
mslope2 = [0.0115, 0.0105, 0.0117, 0.0109, 0.0111, 0.0116, 0.0142, 0.0116, 0.0107, 0.0138, 0.0214, 0.0111]
mslope3 = [0.00118, 0.000814, 0.00126, 0.000942, 0.00106, 0.00123, 0.00267, 0.00125, 0.00111, 0.00252, 0.00566, 0.00102]

# intercepts of the 3 reliability piecewise functions made for every month
mint1 = [-1.225, -0.66, -1.163, -0.756, -0.988, -1.061, -1.098, -0.875, -0.785, -0.991, -1.346, -1.465]
mint2 = [0.173, 0.433, 0.175, 0.376, 0.277, 0.215, 0.0376, 0.274, 0.382, 0.169, -0.361, 0.138]
mint3 = [0.903, 0.948, 0.898, 0.936, 0.921, 0.904, 0.795, 0.909, 0.927, 0.827, 0.599, 0.911]

# daily, monthly, and annual upper and lower bounds
dub = 9
dlb = 2

mub = 500
mlb = 60

aub = 7000
alb = 1000

# here I solve for Km(a) and make a set, but the numbers are high and I think that's because somethings up with the NORMDIST.INV 
fma = [(ceil(mvar[i]*normal85 + mavg[i])) for i in I]

# Maximum number of people allowed on VC each month
vcm = [(mlh[i]-crm[i]-fma[i]) for i in I]

n.update()

fma

vcm

date = [(0, L[l]) for l in L]+[(1, F[f]) for f in F]+[(2, L[l]) for l in L]+[(3, S[s]) for s in S]+[(4, L[l]) for l in L]+[(5, S[s]) for s in S]+[(6, L[l]) for l in L]+[(7, L[l]) for l in L]+[(8, S[s]) for s in S]+[(9, L[l]) for l in L]+[(10, S[s]) for s in S]+[(11, L[l]) for l in L]

x = n.addVars(365, obj = 1)

con1 = n.addConstr(quicksum(x[l] for l in L) <= mub)
con2 = n.addConstr(quicksum(x[f+31] for f in F) <= mub)
con3 = n.addConstr(quicksum(x[l+59] for l in L) <= mub)
con4 = n.addConstr(quicksum(x[s+90] for s in S) <= mub)
con5 = n.addConstr(quicksum(x[l+120] for l in L) <= mub)
con6 = n.addConstr(quicksum(x[s+151] for s in S) <= mub)
con7 = n.addConstr(quicksum(x[l+181] for l in L) <= mub)
con8 = n.addConstr(quicksum(x[l+212] for l in L) <= mub)
con9 = n.addConstr(quicksum(x[s+243] for s in S) <= mub)
con10 = n.addConstr(quicksum(x[l+273] for l in L) <= mub)
con11 = n.addConstr(quicksum(x[s+304] for s in S) <= mub)
con12 = n.addConstr(quicksum(x[l+334] for l in L) <= mub)

con13 = n.addConstr(quicksum(x[l] for l in L) >= mlb)
con14 = n.addConstr(quicksum(x[f+31] for f in F) >= mlb)
con15 = n.addConstr(quicksum(x[l+59] for l in L) >= mlb)
con16 = n.addConstr(quicksum(x[s+90] for s in S) >= mlb)
con17 = n.addConstr(quicksum(x[l+120] for l in L) >= mlb)
con18 = n.addConstr(quicksum(x[s+151] for s in S) >= mlb)
con19 = n.addConstr(quicksum(x[l+181] for l in L) >= mlb)
con20 = n.addConstr(quicksum(x[l+212] for l in L) >= mlb)
con22 = n.addConstr(quicksum(x[s+243] for s in S) >= mlb)
con23 = n.addConstr(quicksum(x[l+273] for l in L) >= mlb)
con24 = n.addConstr(quicksum(x[s+304] for s in S) >= mlb)
con25 = n.addConstr(quicksum(x[l+334] for l in L) >= mlb)

condmax = n.addConstr((x[y] for y in Y) <= dub)
condmin = n.addConstr((x[y] for y in Y) >= dlb)

conamax = n.addConstr(quicksum(x[y] for y in Y) <= aub)
conamin = n.addConstr(quicksum(x[y] for y in Y) >= alb)

n.update()
 